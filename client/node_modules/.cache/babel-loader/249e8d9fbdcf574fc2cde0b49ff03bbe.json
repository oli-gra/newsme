{"ast":null,"code":"'use strict';\n\nvar ES = require('es-abstract/es2017');\n\nvar ThrowCompletion = function Throw(error) {\n  throw error;\n};\n\nvar legacyAssign = function assign(obj, entries) {\n  for (var i = 0; i < entries.length; ++i) {\n    var entry = entries[i];\n\n    if (ES.Type(entry) !== 'Object') {\n      throw new TypeError('iterator returned a non-object; entry expected');\n    }\n\n    var key = ES.Get(entry, '0');\n    var value = ES.Get(entry, '1');\n    var propertyKey = ES.ToPropertyKey(key);\n    ES.CreateDataPropertyOrThrow(obj, propertyKey, value);\n  }\n};\n/* global Symbol */\n\n\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nmodule.exports = function fromEntries(iterable) {\n  ES.RequireObjectCoercible(iterable);\n  var obj = {}; // this part isn't in the spec, it's for a reasonable fallback for pre-ES6 environments\n\n  if (!hasSymbols) {\n    if (!ES.IsArray(iterable)) {\n      throw new TypeError('this environment lacks native Symbols, and can not support non-Array iterables');\n    }\n\n    legacyAssign(obj, iterable);\n    return obj;\n  }\n  /*\n  return ES.AddEntriesFromIterable(obj, iterable, ES.CreateBuiltinFunction('CreateDataPropertyOnObject'));\n  function adder(key, value) {\n  \tvar O = this;\n  \tvar propertyKey = ES.ToPropertyKey(key);\n  \tCreateDataPropertyOrThrow(O, propertyKey, value);\n  }\n  */\n\n\n  var iter = ES.GetIterator(iterable);\n\n  while (true) {\n    // eslint-disable-line no-constant-condition\n    var next = ES.IteratorStep(iter);\n\n    if (next === false) {\n      return obj;\n    }\n\n    var nextItem = ES.IteratorValue(next);\n\n    if (ES.Type(nextItem) !== 'Object') {\n      var error = new TypeError('iterator returned a non-object; entry expected');\n      return ES.IteratorClose(iter, ThrowCompletion(error));\n    }\n\n    try {\n      var key = ES.Get(nextItem, '0');\n      var value = ES.Get(nextItem, '1');\n      var propertyKey = ES.ToPropertyKey(key);\n      ES.CreateDataPropertyOrThrow(obj, propertyKey, value);\n    } catch (e) {\n      return ES.IteratorClose(iter, ThrowCompletion(e));\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}